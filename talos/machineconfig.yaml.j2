---
version: v1alpha1
machine:
  type: {{ machinetype }}
  token: op://Prod/prod-talos/MACHINE_TOKEN
  ca:
    crt: op://Prod/prod-talos/MACHINE_CA_CRT
    {% if machinetype == 'controlplane' %}
    key: op://Prod/prod-talos/MACHINE_CA_KEY
    {% endif %}
  features:
    rbac: true
    stableHostname: true
    {% if machinetype == 'controlplane' %}
    kubernetesTalosAPIAccess:
      enabled: true
      allowedRoles: ["os:admin"]
      allowedKubernetesNamespaces: ["actions-runner-system", "system-upgrade"]
    {% endif %}
    apidCheckExtKeyUsage: true
    diskQuotaSupport: true
    kubePrism:
      enabled: true
      port: 7445
    hostDNS:
      enabled: true
      resolveMemberNames: true
      forwardKubeDNSToHost: false
  files:
    - op: create
      path: /etc/cri/conf.d/20-customization.part
      content: |
        [plugins."io.containerd.cri.v1.images"]
          discard_unpacked_layers = false
        [plugins."io.containerd.cri.v1.runtime"]
          device_ownership_from_security_context = true
    - op: overwrite
      path: /etc/nfsmount.conf
      permissions: 0o644
      content: |
        [ NFSMount_Global_Options ]
        nfsvers=4.1
        hard=True
        nconnect=8
        noatime=True
        rsize=1048576
        wsize=1048576
  install:
    diskSelector:
      model: Samsung SSD 860
    image: factory.talos.dev/metal-installer/d60a9a96a6bbc418c786ee44fd5c01137d9a02497012cf080722ee79d3ee6d7e:v1.11.2
  kernel:
    modules:
      - name: nbd
  kubelet:
    image: ghcr.io/siderolabs/kubelet:v1.34.1
    extraConfig:
      featureGates:
        ImageVolume: true
      serializeImagePulls: false
    defaultRuntimeSeccompProfileEnabled: true
    nodeIP:
      validSubnets: ["10.25.11.0/24"]
    disableManifestsDirectory: true
  network:
    interfaces:
      - interface: eno1
        ignore: true
    nameservers: ["10.25.10.30"]
    disableSearchDomain: true
  nodeLabels:
    topology.kubernetes.io/region: k8s
    topology.kubernetes.io/zone: {{ 'm' if machinetype == 'controlplane' else 'w' }}
  sysctls:
    fs.inotify.max_user_watches: 1048576   # Watchdog
    fs.inotify.max_user_instances: 8192    # Watchdog
    net.core.default_qdisc: fq             # 10Gb/s
    net.core.rmem_max: 67108864            # 10Gb/s | Cloudflared / QUIC
    net.core.wmem_max: 67108864            # 10Gb/s | Cloudflared / QUIC
    net.ipv4.tcp_congestion_control: bbr   # 10Gb/s
    net.ipv4.tcp_fastopen: 3               # Send and accept data in the opening SYN packet
    net.ipv4.tcp_mtu_probing: 1            # 10Gb/s | Jumbo frames
    net.ipv4.tcp_rmem: 4096 87380 33554432 # 10Gb/s
    net.ipv4.tcp_wmem: 4096 65536 33554432 # 10Gb/s
    net.ipv4.tcp_window_scaling: 1         # 10Gb/s
    sunrpc.tcp_slot_table_entries: 128     # 10Gb/s | NFS
    sunrpc.tcp_max_slot_table_entries: 128 # 10Gb/s | NFS
    user.max_user_namespaces: 11255        # User Namespaces
    vm.nr_hugepages: 1024                  # PostgreSQL
  time:
    disabled: false
    servers: ["time.cloudflare.com"]
cluster:
  ca:
    crt: op://Prod/prod-talos/CLUSTER_CA_CRT
    {% if machinetype == 'controlplane' %}
    key: op://Prod/prod-talos/CLUSTER_CA_KEY
    {% endif %}
  clusterName: k8s
  controlPlane:
    endpoint: https://k8s.monosense.io:6443
  discovery:
    enabled: true
    registries:
      kubernetes: { disabled: true }
      service: { disabled: false }
  id: op://Prod/prod-talos/CLUSTER_ID
  network:
    cni:
      name: none
    dnsDomain: cluster.local
    podSubnets: ["10.244.0.0/16"]
    serviceSubnets: ["10.245.0.0/16"]
  secret: op://Prod/prod-talos/CLUSTER_SECRET
  token: op://Prod/prod-talos/CLUSTER_TOKEN
  {% if machinetype == 'controlplane' %}
  aggregatorCA:
    crt: op://Prod/prod-talos/CLUSTER_AGGREGATORCA_CRT
    key: op://Prod/prod-talos/CLUSTER_AGGREGATORCA_KEY
  allowSchedulingOnControlPlanes: true
  apiServer:
    image: registry.k8s.io/kube-apiserver:v1.34.1
    extraArgs:
      enable-aggregator-routing: true
      feature-gates: ImageVolume=true
      audit-log-path: /var/log/audit/kube-apiserver-audit.log
      audit-log-maxage: "7"
      audit-log-maxbackup: "3"
      audit-log-maxsize: "100"
    certSANs: ["k8s.monosense.io"]
    disablePodSecurityPolicy: true
    auditPolicy:
      apiVersion: audit.k8s.io/v1
      kind: Policy
      omitStages: [RequestReceived, ResponseStarted]
      rules:
        - level: None
          nonResourceURLs: [/healthz*, /readyz*, /livez*, /metrics*, /version]
          userGroups: [system:authenticated, system:unauthenticated]
        - level: None
          users: [system:kube-proxy, system:kube-scheduler, system:kube-controller-manager, system:serviceaccount:kube-system:cilium, system:serviceaccount:kube-system:cilium-operator]
          verbs: [get, list, watch]
        - level: Request
          omitManagedFields: true
          resources: [{group: "", resources: [secrets]}]
          verbs: [get, list, watch, create, update, patch, delete]
        - level: Request
          omitManagedFields: true
          resources:
            - {group: "rbac.authorization.k8s.io", resources: [clusterroles, clusterrolebindings, roles, rolebindings]}
            - {group: "", resources: [serviceaccounts]}
          verbs: [create, update, patch, delete]
        - level: Request
          omitManagedFields: true
          resources:
            - {group: "certificates.k8s.io", resources: [certificatesigningrequests, certificatesigningrequests/approval]}
            - {group: "cert-manager.io", resources: [certificates, issuers, clusterissuers]}
          verbs: [create, update, patch, delete]
        - level: Request
          omitManagedFields: true
          resources: [{group: "external-secrets.io", resources: [externalsecrets, secretstores, clustersecretstores]}]
          verbs: [create, update, patch, delete]
        - level: Request
          omitManagedFields: true
          resources: [{group: "", resources: [namespaces]}]
          verbs: [create, delete]
        - level: Request
          omitManagedFields: true
          resources:
            - {group: "networking.k8s.io", resources: [networkpolicies, ingresses]}
            - {group: "cilium.io", resources: [ciliumnetworkpolicies, ciliumclusterwidenetworkpolicies]}
          verbs: [create, update, patch, delete]
        - level: Request
          omitManagedFields: true
          resources:
            - {group: "", resources: [persistentvolumes]}
            - {group: "storage.k8s.io", resources: [storageclasses, volumeattachments]}
            - {group: "ceph.rook.io", resources: [cephclusters, cephblockpools, cephfilesystems]}
          verbs: [create, update, patch, delete]
        - level: Metadata
          omitManagedFields: true
          resources:
            - {group: apps, resources: [deployments, statefulsets, daemonsets, replicasets]}
            - {group: batch, resources: [jobs, cronjobs]}
            - {group: "", resources: [pods, services, configmaps]}
          verbs: [create, update, patch, delete]
        - level: Metadata
          omitManagedFields: true
          resources:
            - {group: "kustomize.toolkit.fluxcd.io", resources: [kustomizations]}
            - {group: "helm.toolkit.fluxcd.io", resources: [helmreleases]}
            - {group: "source.toolkit.fluxcd.io", resources: [gitrepositories, helmrepositories, helmcharts]}
          verbs: [create, update, patch, delete]
        - level: Metadata
          omitManagedFields: true
          verbs: [get, list, watch]
        - level: Metadata
          omitManagedFields: false
        - level: None
  controllerManager:
    image: registry.k8s.io/kube-controller-manager:v1.34.1
    extraArgs: { bind-address: 0.0.0.0 }
  coreDNS: { disabled: true }
  etcd:
    advertisedSubnets: ["10.25.11.0/24"]
    ca:
      crt: op://Prod/prod-talos/CLUSTER_ETCD_CA_CRT
      key: op://Prod/prod-talos/CLUSTER_ETCD_CA_KEY
    extraArgs: { listen-metrics-urls: http://0.0.0.0:2381 }
  proxy:
    disabled: true
    image: registry.k8s.io/kube-proxy:v1.34.1
  secretboxEncryptionSecret: op://Prod/prod-talos/CLUSTER_SECRETBOXENCRYPTIONSECRET
  scheduler:
    image: registry.k8s.io/kube-scheduler:v1.34.1
    extraArgs: { bind-address: 0.0.0.0 }
    config:
      apiVersion: kubescheduler.config.k8s.io/v1
      kind: KubeSchedulerConfiguration
      profiles:
        - schedulerName: default-scheduler
          plugins:
            score:
              disabled: [{ name: ImageLocality }]
          pluginConfig:
            - name: PodTopologySpread
              args:
                defaultingType: List
                defaultConstraints:
                  - maxSkew: 1
                    topologyKey: kubernetes.io/hostname
                    whenUnsatisfiable: ScheduleAnyway
  serviceAccount:
    key: op://Prod/prod-talos/CLUSTER_SERVICEACCOUNT_KEY
  {% endif %}
---
apiVersion: v1alpha1
kind: UserVolumeConfig
name: openebs
provisioning:
  diskSelector:
    match: disk.model == "TEAM TM8FP6512G" && !system_disk
  minSize: 500GiB
---
apiVersion: v1alpha1
kind: WatchdogTimerConfig
device: /dev/watchdog0
timeout: 5m
