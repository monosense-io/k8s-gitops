---
version: '3'

vars:
  DEFAULT_CLUSTERS: infra,apps

tasks:
  # ============================================================================
  # High-Level Orchestration Tasks
  # ============================================================================

  infra:
    desc: üöÄ Bootstrap infra cluster (complete 3-phase automated)
    cmds:
      - task: bootstrap
        vars: {CLUSTER: infra, CONTEXT: infra}

  apps:
    desc: üöÄ Bootstrap apps cluster (complete 3-phase automated)
    cmds:
      - task: bootstrap
        vars: {CLUSTER: apps, CONTEXT: apps}

  bootstrap:
    desc: Complete automated bootstrap (all phases)
    prompt: Bootstrap {{.CLUSTER}} cluster? This will apply CRDs and infrastructure.
    cmds:
      - task: preflight
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}", DRY_RUN: "{{.DRY_RUN}}"}
      - echo "üéØ Bootstrapping {{.CLUSTER}} cluster{{if eq .DRY_RUN "true"}} (DRY-RUN MODE){{end}}..."
      - echo ""
      - task: phase:0
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}", DRY_RUN: "{{.DRY_RUN}}"}
      - task: phase:1
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}", DRY_RUN: "{{.DRY_RUN}}"}
      - task: phase:2
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}", DRY_RUN: "{{.DRY_RUN}}"}
      - task: phase:3
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}", DRY_RUN: "{{.DRY_RUN}}"}
      - echo ""
      - echo "‚úÖ Bootstrap {{if eq .DRY_RUN "true"}}dry-run {{end}}complete for {{.CLUSTER}} cluster!"
      - echo ""
      - task: status
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}"}
    vars:
      CLUSTER: '{{.CLUSTER | default ""}}'
      CONTEXT: '{{.CONTEXT | default .CLUSTER}}'
      DRY_RUN: '{{.DRY_RUN | default "false"}}'
    requires:
      vars: [CLUSTER]

  # ============================================================================
  # Individual Phase Tasks
  # ============================================================================

  phase:0:
    desc: üì¶ Phase 0 - Apply prerequisites
    cmds:
      - 'echo "üì¶ Phase 0: Applying prerequisites..."'
      - task: prereq
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}"}
      - echo "‚úÖ Prerequisites applied"
    vars:
      CLUSTER: '{{.CLUSTER}}'
      CONTEXT: '{{.CONTEXT}}'

  phase:1:
    desc: üîß Phase 1 - Install CRDs
    cmds:
      - 'echo "üîß Phase 1: Installing CRDs..."'
      - task: crds
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}"}
      - echo "‚úÖ CRDs installed and established"
    vars:
      CLUSTER: '{{.CLUSTER}}'
      CONTEXT: '{{.CONTEXT}}'

  phase:2:
    desc: üöÄ Phase 2 - Deploy core infrastructure
    cmds:
      - 'echo "üöÄ Phase 2: Deploying core infrastructure..."'
      - task: core
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}"}
      - echo "‚úÖ Core infrastructure deployed"
    vars:
      CLUSTER: '{{.CLUSTER}}'
      CONTEXT: '{{.CONTEXT}}'

  phase:3:
    desc: ‚úÖ Phase 3 - Validate deployment
    cmds:
      - 'echo "‚úÖ Phase 3: Validating deployment..."'
      - task: validate
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}"}
      - echo "‚úÖ Validation complete"
    vars:
      CLUSTER: '{{.CLUSTER}}'
      CONTEXT: '{{.CONTEXT}}'

  # ============================================================================
  # Core Bootstrap Tasks
  # ============================================================================

  prereq:
    internal: true
    cmds:
      - |
        {{if eq .DRY_RUN "true"}}
        echo "  ‚Üí [DRY-RUN] Would apply prerequisites:"
        cat {{.BOOTSTRAP_DIR}}/prerequisites/resources.yaml
        echo "  ‚Üí [DRY-RUN] Would wait for namespaces to be Active"
        {{else}}
        # Only use op inject if file contains op:// references
        if grep -q "op://" {{.BOOTSTRAP_DIR}}/prerequisites/resources.yaml 2>/dev/null && \
           command -v op &> /dev/null && op account list &> /dev/null 2>&1; then
          echo "  ‚Üí Injecting 1Password secrets..."
          op inject -i {{.BOOTSTRAP_DIR}}/prerequisites/resources.yaml | \
            kubectl --context={{.CONTEXT}} apply -f -
        else
          echo "  ‚Üí Applying prerequisites (without secret injection)..."
          kubectl --context={{.CONTEXT}} apply -f {{.BOOTSTRAP_DIR}}/prerequisites/resources.yaml
        fi
        echo "  ‚Üí Waiting for namespaces..."
        kubectl --context={{.CONTEXT}} wait --for=jsonpath='{.status.phase}'=Active namespace/external-secrets namespace/flux-system --timeout=60s
        {{end}}
    vars:
      CONTEXT: '{{.CONTEXT}}'
      DRY_RUN: '{{.DRY_RUN | default "false"}}'

  crds:
    internal: true
    cmds:
      - |
        {{if eq .DRY_RUN "true"}}
        echo "  ‚Üí [DRY-RUN] Would extract and apply CRDs:"
        helmfile -f {{.BOOTSTRAP_DIR}}/helmfile.d/00-crds.yaml -e {{.CLUSTER}} template 2>/dev/null | \
          yq ea 'select(.kind == "CustomResourceDefinition")' | grep "^  name:" | head -10
        echo "  ... (truncated)"
        echo "  ‚Üí [DRY-RUN] Would install Gateway API CRDs v1.4.0"
        echo "  ‚Üí [DRY-RUN] Would wait for CRDs to be established"
        {{else}}
        echo "  ‚Üí Extracting and applying CRDs..."
        helmfile -f {{.BOOTSTRAP_DIR}}/helmfile.d/00-crds.yaml -e {{.CLUSTER}} template | \
          yq ea 'select(.kind == "CustomResourceDefinition")' | \
          kubectl --context={{.CONTEXT}} apply --server-side --force-conflicts -f -
        echo "  ‚Üí Installing Gateway API CRDs..."
        kubectl --context={{.CONTEXT}} apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.4.0/standard-install.yaml
        echo "  ‚Üí Waiting for CRDs to be established..."
        kubectl --context={{.CONTEXT}} wait --for condition=established crd/prometheusrules.monitoring.coreos.com crd/servicemonitors.monitoring.coreos.com --timeout=120s
        kubectl --context={{.CONTEXT}} wait --for condition=established crd/gatewayclasses.gateway.networking.k8s.io crd/gateways.gateway.networking.k8s.io --timeout=120s
        {{end}}
    vars:
      CLUSTER: '{{.CLUSTER}}'
      CONTEXT: '{{.CONTEXT}}'
      DRY_RUN: '{{.DRY_RUN | default "false"}}'

  core:
    internal: true
    cmds:
      - |
        {{if eq .DRY_RUN "true"}}
        echo "  ‚Üí [DRY-RUN] Would sync core infrastructure via helmfile:"
        helmfile -f {{.BOOTSTRAP_DIR}}/helmfile.d/01-core.yaml.gotmpl -e {{.CLUSTER}} list 2>/dev/null || echo "    (helm releases)"
        echo "  ‚Üí [DRY-RUN] Would wait for Flux to be ready"
        {{else}}
        echo "  ‚Üí Syncing core infrastructure via helmfile..."
        helmfile -f {{.BOOTSTRAP_DIR}}/helmfile.d/01-core.yaml.gotmpl -e {{.CLUSTER}} sync
        echo "  ‚Üí Waiting for Flux to be ready..."
        kubectl --context={{.CONTEXT}} wait --for=condition=Ready pod -l app.kubernetes.io/name=flux-instance -n flux-system --timeout=300s
        {{end}}
    vars:
      CLUSTER: '{{.CLUSTER}}'
      CONTEXT: '{{.CONTEXT}}'
      DRY_RUN: '{{.DRY_RUN | default "false"}}'

  validate:
    internal: true
    cmds:
      - task: validate:crds
        vars: {CONTEXT: "{{.CONTEXT}}"}
      - task: validate:flux
        vars: {CONTEXT: "{{.CONTEXT}}"}
      - task: validate:prometheusrules
        vars: {CONTEXT: "{{.CONTEXT}}"}
    vars:
      CONTEXT: '{{.CONTEXT}}'

  # ============================================================================
  # Validation Tasks
  # ============================================================================

  validate:crds:
    internal: true
    cmds:
      - |
        echo "  ‚Üí Checking VictoriaMetrics CRDs..."
        CRD_COUNT=$(kubectl --context={{.CONTEXT}} get crd 2>/dev/null | grep -c victoriametrics || echo "0")
        if [ "$CRD_COUNT" -ge 10 ]; then
          echo "    ‚úÖ Found $CRD_COUNT VictoriaMetrics CRDs"
        else
          echo "    ‚ùå Only found $CRD_COUNT VictoriaMetrics CRDs (expected 14+)"
          exit 1
        fi
    vars:
      CONTEXT: '{{.CONTEXT}}'

  validate:flux:
    internal: true
    cmds:
      - |
        echo "  ‚Üí Checking Flux Kustomizations..."
        if flux --context={{.CONTEXT}} get kustomizations -A --status-selector ready=false 2>&1 | grep -q "no kustomizations found"; then
          echo "    ‚úÖ All Flux Kustomizations ready"
        else
          echo "    ‚ö†Ô∏è  Some Kustomizations not ready (check: task bootstrap:status)"
        fi
    vars:
      CONTEXT: '{{.CONTEXT}}'

  validate:prometheusrules:
    internal: true
    cmds:
      - |
        echo "  ‚Üí Checking PrometheusRules..."
        PR_COUNT=$(kubectl --context={{.CONTEXT}} get prometheusrules -A --no-headers 2>/dev/null | wc -l | tr -d ' ')
        if [ "$PR_COUNT" -gt 0 ]; then
          echo "    ‚úÖ Found $PR_COUNT PrometheusRule resources"
        else
          echo "    ‚ö†Ô∏è  No PrometheusRule resources found yet (may appear after infrastructure reconciles)"
        fi
    vars:
      CONTEXT: '{{.CONTEXT}}'

  # ============================================================================
  # Pre-Flight Checks
  # ============================================================================

  preflight:
    desc: üîç Run pre-flight checks before bootstrap
    cmds:
      - task: preflight:tools
      - task: preflight:cluster
        vars: {CLUSTER: "{{.CLUSTER}}", CONTEXT: "{{.CONTEXT}}"}
      - task: preflight:files
        vars: {CLUSTER: "{{.CLUSTER}}"}
    vars:
      CLUSTER: '{{.CLUSTER}}'
      CONTEXT: '{{.CONTEXT}}'

  preflight:tools:
    internal: true
    cmds:
      - |
        echo "üîç Checking required tools..."
        MISSING=""
        OPTIONAL_MISSING=""

        # Required tools
        for tool in kubectl helmfile yq; do
          if ! command -v $tool &> /dev/null; then
            echo "  ‚ùå $tool (required)"
            MISSING="$MISSING $tool"
          else
            echo "  ‚úÖ $tool"
          fi
        done

        # Optional tools
        for tool in flux op; do
          if ! command -v $tool &> /dev/null; then
            echo "  ‚ö†Ô∏è  $tool (optional)"
            OPTIONAL_MISSING="$OPTIONAL_MISSING $tool"
          else
            echo "  ‚úÖ $tool"
          fi
        done

        if [ -n "$MISSING" ]; then
          echo ""
          echo "‚ùå Missing required tools:$MISSING"
          echo "Install with: brew install$MISSING"
          exit 1
        fi

        if [ -n "$OPTIONAL_MISSING" ]; then
          echo ""
          echo "‚ÑπÔ∏è  Optional tools not found:$OPTIONAL_MISSING"
        fi

  preflight:cluster:
    internal: true
    cmds:
      - |
        echo ""
        echo "üîç Checking cluster connectivity..."
        if kubectl --context={{.CONTEXT}} cluster-info &> /dev/null; then
          echo "  ‚úÖ Cluster {{.CLUSTER}} (context{{":"}} {{.CONTEXT}}) is reachable"
          API_VERSION=$(kubectl --context={{.CONTEXT}} version -o json 2>/dev/null | \
            jq -r '.serverVersion.gitVersion' 2>/dev/null || echo "unknown")
          echo "  ‚ÑπÔ∏è  Kubernetes version{{":"}} $API_VERSION"
        else
          echo "  ‚ùå Cannot connect to cluster {{.CLUSTER}}"
          echo ""
          echo "Available contexts:"
          kubectl config get-contexts
          exit 1
        fi
    vars:
      CLUSTER: '{{.CLUSTER}}'
      CONTEXT: '{{.CONTEXT}}'

  preflight:files:
    internal: true
    cmds:
      - |
        echo ""
        echo "üîç Checking bootstrap files..."
        MISSING_FILES=""

        FILES=(
          "{{.BOOTSTRAP_DIR}}/prerequisites/resources.yaml"
          "{{.BOOTSTRAP_DIR}}/helmfile.d/00-crds.yaml"
          "{{.BOOTSTRAP_DIR}}/helmfile.d/01-core.yaml.gotmpl"
          "{{.BOOTSTRAP_DIR}}/clusters/{{.CLUSTER}}/values.yaml"
        )

        for file in "${FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "  ‚úÖ $(basename $file)"
          else
            echo "  ‚ùå Missing: $file"
            MISSING_FILES="1"
          fi
        done

        if [ -n "$MISSING_FILES" ]; then
          echo ""
          echo "‚ùå Some bootstrap files are missing"
          exit 1
        fi
    vars:
      CLUSTER: '{{.CLUSTER}}'

  # ============================================================================
  # Status and Monitoring
  # ============================================================================

  status:
    desc: üìä Show cluster bootstrap status
    cmds:
      - |
        echo "=============================================="
        echo "üìä Cluster Status{{":"}} {{.CLUSTER}}"
        echo "=============================================="
        echo ""
        echo "üìã CRD Status:"
        VM_CRDS=$(kubectl --context={{.CONTEXT}} get crd 2>/dev/null | grep victoriametrics | wc -l | tr -d ' ')
        PROM_CRDS=$(kubectl --context={{.CONTEXT}} get crd 2>/dev/null | grep monitoring.coreos | wc -l | tr -d ' ')
        echo "  VictoriaMetrics CRDs: $VM_CRDS"
        echo "  Prometheus CRDs: $PROM_CRDS"
        echo ""
        echo "üîß Core Components:"
        kubectl --context={{.CONTEXT}} get pods -n kube-system -l app.kubernetes.io/name=cilium \
          --no-headers 2>/dev/null | wc -l | xargs echo "  Cilium pods:" || echo "  Cilium: Not found"
        kubectl --context={{.CONTEXT}} get pods -n cert-manager \
          --no-headers 2>/dev/null | wc -l | xargs echo "  cert-manager pods:" || echo "  cert-manager: Not found"
        kubectl --context={{.CONTEXT}} get pods -n flux-system \
          --no-headers 2>/dev/null | wc -l | xargs echo "  Flux pods:" || echo "  Flux: Not found"
        echo ""
        echo "üìä Flux Kustomizations:"
        flux --context={{.CONTEXT}} get kustomizations -A 2>/dev/null || echo "  Flux not yet installed"
        echo ""
        echo "‚ö†Ô∏è  PrometheusRules:"
        kubectl --context={{.CONTEXT}} get prometheusrules -A --no-headers 2>/dev/null | wc -l | \
          xargs echo "  Total PrometheusRules:" || echo "  None found"
        echo "=============================================="
    vars:
      CLUSTER: '{{.CLUSTER | default "infra"}}'
      CONTEXT: '{{.CONTEXT | default .CLUSTER}}'

  list-crds:
    desc: üìã List all VictoriaMetrics and monitoring CRDs
    cmds:
      - |
        echo "VictoriaMetrics CRDs:"
        kubectl --context={{.CONTEXT}} get crd 2>/dev/null | grep victoriametrics | nl
        echo ""
        echo "Prometheus Monitoring CRDs:"
        kubectl --context={{.CONTEXT}} get crd 2>/dev/null | grep monitoring.coreos | nl
    vars:
      CLUSTER: '{{.CLUSTER | default "infra"}}'
      CONTEXT: '{{.CONTEXT | default .CLUSTER}}'

  # ============================================================================
  # Utility Tasks
  # ============================================================================

  dry-run:
    desc: üîç Show what bootstrap would do (dry-run)
    cmds:
      - echo "=== Bootstrap Dry-Run for {{.CLUSTER}} ==="
      - echo ""
      - 'echo "Phase 0: Would apply prerequisites"'
      - cat {{.BOOTSTRAP_DIR}}/prerequisites/resources.yaml | head -20
      - echo "..."
      - echo ""
      - 'echo "Phase 1: Would extract and apply CRDs"'
      - |
        helmfile -f {{.BOOTSTRAP_DIR}}/helmfile.d/00-crds.yaml -e {{.CLUSTER}} template 2>/dev/null | grep 'kind: CustomResourceDefinition' | head -10 || echo "  (CRD extraction output)"
      - echo "..."
      - echo ""
      - 'echo "Phase 2: Would sync core infrastructure"'
      - helmfile -f {{.BOOTSTRAP_DIR}}/helmfile.d/01-core.yaml.gotmpl -e {{.CLUSTER}} list 2>/dev/null || echo "  (helmfile releases)"
      - echo ""
      - 'echo "Phase 3: Would validate deployment"'
    vars:
      CLUSTER: '{{.CLUSTER | default "infra"}}'

  clean:
    desc: üßπ Clean up bootstrap artifacts (DANGEROUS - removes CRDs!)
    prompt: "This will DELETE all CRDs and custom resources. Are you absolutely sure?"
    cmds:
      - echo "‚ö†Ô∏è  Deleting VictoriaMetrics CRDs..."
      - kubectl --context={{.CONTEXT}} delete crd -l app.kubernetes.io/name=victoria-metrics-operator || true
      - echo "‚ö†Ô∏è  This operation cannot be undone!"
    vars:
      CLUSTER: '{{.CLUSTER | default "infra"}}'
      CONTEXT: '{{.CONTEXT | default .CLUSTER}}'
