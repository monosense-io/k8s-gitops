---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/apps/v1/deployment.json
apiVersion: apps/v1
kind: Deployment
metadata:
  name: synergyflow-backend
  namespace: synergyflow
  labels:
    app.kubernetes.io/name: synergyflow
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: synergyflow
    app.kubernetes.io/version: "0.1.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0

  selector:
    matchLabels:
      app.kubernetes.io/name: synergyflow
      app.kubernetes.io/component: application

  template:
    metadata:
      labels:
        app.kubernetes.io/name: synergyflow
        app.kubernetes.io/component: application
        app.kubernetes.io/part-of: synergyflow
        app.kubernetes.io/version: "0.1.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
        config/checksum: "{{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}"

    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      initContainers:
        # Wait for database pooler to be ready
        - name: wait-for-db
          image: postgres:16-alpine
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              until pg_isready -h synergyflow-pooler-rw.cnpg-system.svc.cluster.local -p 5432 -U synergyflow; do
                echo "Waiting for database pooler..."
                sleep 2
              done
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: synergyflow-db-credentials
                  key: DB_PASSWORD

        # Wait for Kafka to be ready
        - name: wait-for-kafka
          image: confluentinc/cp-kafka:7.8.0
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              until kafka-broker-api-versions --bootstrap-server synergyflow-kafka-bootstrap.messaging.svc.cluster.local:9092 > /dev/null 2>&1; do
                echo "Waiting for Kafka..."
                sleep 2
              done

      imagePullSecrets:
        - name: harbor-registry-secret

      containers:
        # Main application container with Flowable
        - name: synergyflow
          image: harbor.monosense.io/synergyflow/backend:latest
          imagePullPolicy: IfNotPresent

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "production"

            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: synergyflow-db-credentials
                  key: DB_USERNAME

            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: synergyflow-db-credentials
                  key: DB_PASSWORD

            - name: KAFKA_SASL_JAAS_CONFIG
              valueFrom:
                secretKeyRef:
                  name: synergyflow-kafka-credentials
                  key: KAFKA_SASL_JAAS_CONFIG

            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: synergyflow-redis-credentials
                  key: REDIS_PASSWORD

            - name: JAVA_OPTS
              value: >-
                -Xms1024m
                -Xmx1024m
                -XX:+UseG1GC
                -XX:MaxGCPauseMillis=200
                -XX:+HeapDumpOnOutOfMemoryError
                -XX:HeapDumpPath=/tmp/heapdump.hprof
                -Djava.security.egd=file:/dev/./urandom
                -Dfile.encoding=UTF-8

          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true

          resources:
            requests:
              memory: 1.5Gi
              cpu: 500m
            limits:
              memory: 2Gi
              cpu: 2000m

          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault

        # OPA sidecar for policy enforcement
        - name: opa
          image: openpolicyagent/opa:0.68.0
          imagePullPolicy: IfNotPresent

          args:
            - run
            - --server
            - --addr=0.0.0.0:8181
            - --diagnostic-addr=0.0.0.0:8282
            - --log-level=info
            - --log-format=json
            - /policies/policy.rego

          ports:
            - name: http
              containerPort: 8181
              protocol: TCP
            - name: diagnostic
              containerPort: 8282
              protocol: TCP

          volumeMounts:
            - name: opa-policy
              mountPath: /policies
              readOnly: true

          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 256Mi
              cpu: 500m

          livenessProbe:
            httpGet:
              path: /health
              port: diagnostic
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5

          readinessProbe:
            httpGet:
              path: /health?bundle=true
              port: diagnostic
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3

          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault

      volumes:
        - name: config
          configMap:
            name: synergyflow-config

        - name: opa-policy
          configMap:
            name: opa-policy

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: synergyflow
                topologyKey: kubernetes.io/hostname

      terminationGracePeriodSeconds: 60
