---
# Harbor Database Provisioning Job for Shared Cluster
apiVersion: batch/v1
kind: Job
metadata:
  name: harbor-database-provisioner
  namespace: cnpg-system
  labels:
    app.kubernetes.io/name: harbor-database-provisioner
    app.kubernetes.io/component: database-setup
    app.kubernetes.io/part-of: harbor-migration
spec:
  # Keep completed job for 24 hours for debugging
  ttlSecondsAfterFinished: 86400
  backoffLimit: 3

  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor-database-provisioner
    spec:
      restartPolicy: OnFailure
      serviceAccountName: database-provisioner

      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault

      containers:
        - name: harbor-provisioner
          image: ghcr.io/cloudnative-pg/postgresql:16.8
          imagePullPolicy: IfNotPresent

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL

          env:
            # Database configuration
            - name: DB_NAME_REGISTRY
              value: "registry"
            - name: DB_NAME_NOTARY_SERVER
              value: "notary_server"
            - name: DB_NAME_NOTARY_SIGNER
              value: "notary_signer"
            - name: DB_OWNER
              value: "harbor_app"
            - name: CLUSTER_NAME
              value: "shared-postgres"
            - name: CLUSTER_NAMESPACE
              value: "cnpg-system"

            # Superuser credentials
            - name: PGHOST
              value: "$(CLUSTER_NAME)-rw.$(CLUSTER_NAMESPACE).svc.cluster.local"
            - name: PGPORT
              value: "5432"
            - name: PGDATABASE
              value: "postgres"
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: cnpg-superuser
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: cnpg-superuser
                  key: password

            # Harbor application user password
            - name: HARBOR_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: harbor-db-credentials
                  key: password

          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Starting Harbor database provisioning for shared cluster"

              # Wait for database to be ready
              until psql -c '\l' > /dev/null 2>&1; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 5
              done

              echo "PostgreSQL is ready"

              # Function to create database and set owner
              create_database() {
                local db_name=$1
                local db_owner=$2

                echo "Checking database: $db_name"

                # Check if database exists
                DB_EXISTS=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='$db_name'")

                if [ "$DB_EXISTS" = "1" ]; then
                  echo "Database $db_name already exists"
                else
                  echo "Creating database: $db_name"
                  psql -c "CREATE DATABASE $db_name OWNER $db_owner;"
                fi

                # Grant permissions
                echo "Granting permissions for $db_name"
                psql -c "GRANT ALL PRIVILEGES ON DATABASE $db_name TO $db_owner;"

                # Connect to database and grant schema permissions
                export PGDATABASE=$db_name
                psql -c "GRANT ALL ON SCHEMA public TO $db_owner;"
                psql -c "ALTER SCHEMA public OWNER TO $db_owner;"

                # Install any required extensions
                psql -c "CREATE EXTENSION IF NOT EXISTS uuid-ossp;"

                # Revoke public access
                psql -c "REVOKE ALL ON DATABASE $db_name FROM PUBLIC;"

                echo "Database $db_name setup completed"
                export PGDATABASE=postgres  # Reset to default
              }

              # Check if user exists and create/update
              USER_EXISTS=$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_OWNER'")

              if [ "$USER_EXISTS" = "1" ]; then
                echo "User $DB_OWNER already exists, updating password"
                psql -c "ALTER USER $DB_OWNER WITH PASSWORD '$HARBOR_PASSWORD';"
              else
                echo "Creating user: $DB_OWNER"
                psql -c "CREATE USER $DB_OWNER WITH PASSWORD '$HARBOR_PASSWORD' LOGIN;"
              fi

              # Create Harbor databases
              create_database "$DB_NAME_REGISTRY" "$DB_OWNER"
              create_database "$DB_NAME_NOTARY_SERVER" "$DB_OWNER"
              create_database "$DB_NAME_NOTARY_SIGNER" "$DB_OWNER"

              echo "Harbor database provisioning completed successfully"
              echo "Databases created:"
              echo "  - $DB_NAME_REGISTRY"
              echo "  - $DB_NAME_NOTARY_SERVER"
              echo "  - $DB_NAME_NOTARY_SIGNER"
              echo "Owner: $DB_OWNER"

          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi

---
# Harbor Database Verification Job
apiVersion: batch/v1
kind: Job
metadata:
  name: harbor-database-verification
  namespace: cnpg-system
  labels:
    app.kubernetes.io/name: harbor-database-verification
    app.kubernetes.io/component: database-verification
    app.kubernetes.io/part-of: harbor-migration
spec:
  # Keep completed job for 24 hours for debugging
  ttlSecondsAfterFinished: 86400
  backoffLimit: 1

  template:
    metadata:
      labels:
        app.kubernetes.io/name: harbor-database-verification
    spec:
      restartPolicy: OnFailure
      serviceAccountName: database-provisioner

      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault

      containers:
        - name: harbor-verifier
          image: ghcr.io/cloudnative-pg/postgresql:16.8
          imagePullPolicy: IfNotPresent

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL

          env:
            # Database configuration
            - name: DB_OWNER
              value: "harbor_app"
            - name: CLUSTER_NAME
              value: "shared-postgres"
            - name: CLUSTER_NAMESPACE
              value: "cnpg-system"

            # Harbor application user credentials
            - name: PGHOST
              value: "$(CLUSTER_NAME)-rw.$(CLUSTER_NAMESPACE).svc.cluster.local"
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: harbor-db-credentials
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: harbor-db-credentials
                  key: password

          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Verifying Harbor database access"

              # Function to test database access
              test_database_access() {
                local db_name=$1

                echo "Testing access to database: $db_name"

                export PGDATABASE=$db_name

                # Test basic connection
                psql -c "SELECT current_database(), current_user;" > /dev/null

                # Test table creation (basic permissions)
                psql -c "CREATE TABLE IF NOT EXISTS verification_test (id serial PRIMARY KEY, test_text text);" > /dev/null

                # Test data insertion
                psql -c "INSERT INTO verification_test (test_text) VALUES ('Harbor migration verification - $(date)');" > /dev/null

                # Test data retrieval
                psql -c "SELECT COUNT(*) FROM verification_test;" > /dev/null

                # Clean up test table
                psql -c "DROP TABLE IF EXISTS verification_test;" > /dev/null

                echo "Database $db_name access verified successfully"
              }

              # Test access to all Harbor databases
              test_database_access "registry"
              test_database_access "notary_server"
              test_database_access "notary_signer"

              echo "All Harbor databases verified successfully"
              echo "Ready for Harbor migration to shared cluster"

          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi