---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: shared-postgres
  namespace: cnpg-system
spec:
  description: "Shared multi-tenant PostgreSQL cluster for platform applications"

  # PostgreSQL Configuration
  imageName: ghcr.io/cloudnative-pg/postgresql:16.8
  instances: 3

  # Update Strategy
  primaryUpdateStrategy: unsupervised
  primaryUpdateMethod: switchover

  # High Availability - ENABLING SYNCHRONOUS REPLICATION
  minSyncReplicas: 1    # CHANGED: Enable synchronous replication
  maxSyncReplicas: 2

  # Superuser Access
  enableSuperuserAccess: true
  superuserSecret:
    name: cnpg-superuser

  # Bootstrap Configuration
  bootstrap:
    initdb:
      database: postgres
      owner: postgres
      secret:
        name: cnpg-superuser
      postInitSQL:
        # Core monitoring extensions
        - CREATE EXTENSION IF NOT EXISTS pg_stat_statements;

        # GitLab required extensions
        - CREATE EXTENSION IF NOT EXISTS pg_trgm;           # Text similarity and trigram indexing
        - CREATE EXTENSION IF NOT EXISTS btree_gist;        # GiST indexing for common datatypes
        - CREATE EXTENSION IF NOT EXISTS plpgsql;           # Procedural language (usually pre-installed)
        - CREATE EXTENSION IF NOT EXISTS amcheck;           # Relation integrity verification

        # Harbor compatibility extensions
        - 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp"'         # UUID generation (Harbor may need)

  # Storage Configuration
  storage:
    storageClass: ${CNPG_STORAGE_CLASS}
    size: ${CNPG_DATA_SIZE}
    resizeInUseVolumes: true
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${CNPG_DATA_SIZE}
      volumeMode: Filesystem

  walStorage:
    storageClass: ${CNPG_STORAGE_CLASS}
    size: ${CNPG_WAL_SIZE}
    resizeInUseVolumes: true
    pvcTemplate:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${CNPG_WAL_SIZE}
      volumeMode: Filesystem

  # Resource Management (Optimized for Guaranteed QoS)
  resources:
    requests:
      cpu: "1000m"
      memory: "4Gi"
    limits:
      cpu: "1000m"
      memory: "4Gi"

  # PostgreSQL Configuration
  postgresql:
    parameters:
      # Memory Configuration (Optimized for 4GB container)
      shared_buffers: "1GB"          # 25% of container memory
      effective_cache_size: "3GB"     # 75% of container memory
      maintenance_work_mem: "512MB"   # 12.5% of container memory
      work_mem: "16MB"                # Reduced for lower memory footprint

      # WAL Configuration
      wal_level: replica
      max_wal_senders: "10"
      max_replication_slots: "10"
      wal_keep_size: "1GB"
      wal_compression: "on"
      wal_buffers: "16MB"

      # Checkpoint Configuration
      checkpoint_timeout: "15min"
      checkpoint_completion_target: "0.9"
      max_wal_size: "8GB"
      min_wal_size: "2GB"

      # Query Planner
      random_page_cost: "1.1"
      effective_io_concurrency: "200"

      # Worker Processes
      max_worker_processes: "16"
      max_parallel_workers_per_gather: "4"
      max_parallel_workers: "8"
      max_parallel_maintenance_workers: "4"

      # Connection Configuration
      max_connections: "200"

      # Logging Configuration
      log_min_duration_statement: "1000"
      log_checkpoints: "on"
      log_connections: "on"
      log_disconnections: "on"
      log_lock_waits: "on"
      log_line_prefix: "%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h "

      # Autovacuum Configuration - ENHANCED FOR MULTI-TENANT
      autovacuum: "on"
      autovacuum_max_workers: "6"     # INCREASED: Better for multi-tenant
      autovacuum_naptime: "10s"       # REDUCED: More responsive
      autovacuum_vacuum_threshold: "50"
      autovacuum_vacuum_scale_factor: "0.1"
      autovacuum_analyze_threshold: "50"
      autovacuum_analyze_scale_factor: "0.05"

      # Statistics
      track_activities: "on"
      track_counts: "on"
      track_io_timing: "on"
      track_functions: "all"
      pg_stat_statements.track: "all"

      # Extensions (shared_preload_libraries is auto-managed by operator)

      # TLS Configuration (ssl and ssl_prefer_server_ciphers are auto-managed)
      ssl_min_protocol_version: "TLSv1.3"

    pg_hba:
      - host all all all scram-sha-256
      - hostssl all all all scram-sha-256

  # Monitoring
  monitoring:
    enablePodMonitor: true
    podMonitorMetricRelabelings:
      - sourceLabels: [cluster]
        targetLabel: cnpg_cluster
        action: replace
    customQueriesConfigMap:
      - name: shared-postgres-monitoring
        key: custom-queries.yaml

  # Pod Scheduling (Optimized for Cluster Mesh)
  affinity:
    enablePodAntiAffinity: true
    topologyKey: kubernetes.io/hostname
    podAntiAffinityType: preferred
    # Add node affinity for cross-cluster optimization
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: topology.kubernetes.io/region
                operator: In
                values:
                  - infra

  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          cnpg.io/cluster: shared-postgres
    # Add additional spread constraint for cluster mesh optimization
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          cnpg.io/cluster: shared-postgres

  # Replication Slots
  replicationSlots:
    highAvailability:
      enabled: true
      slotPrefix: _cnpg_
    updateInterval: 30

  # Backup Configuration
  backup:
    retentionPolicy: "30d"
    barmanObjectStore:
      destinationPath: "s3://${CNPG_BACKUP_BUCKET}/shared-postgres"
      endpointURL: "${CNPG_MINIO_ENDPOINT_URL}"
      s3Credentials:
        accessKeyId:
          name: cnpg-minio-credentials
          key: access-key
        secretAccessKey:
          name: cnpg-minio-credentials
          key: secret-key
      wal:
        compression: gzip
        encryption: AES256
        maxParallel: 4
      data:
        compression: gzip
        encryption: AES256
        jobs: 2
        immediateCheckpoint: true
      serverName: shared-postgres
      tags:
        environment: production
        cluster: infra
        application: platform-databases

  # Managed Database Roles
  managed:
    roles:
      # GitLab Application User (scaled for 10 users)
      - name: gitlab_app
        ensure: present
        login: true
        superuser: false
        createdb: false
        createrole: false
        inherit: true
        replication: false
        connectionLimit: 25    # Reduced from 50, appropriate for 10 users
        passwordSecret:
          name: gitlab-db-credentials

      # Harbor Application User - UPDATED WITH HIGHER LIMITS
      - name: harbor_app
        ensure: present
        login: true
        superuser: false
        createdb: false
        createrole: false
        inherit: true
        replication: false
        connectionLimit: 50    # INCREASED from 30
        passwordSecret:
          name: harbor-db-credentials

      # Mattermost Application User
      - name: mattermost_app
        ensure: present
        login: true
        superuser: false
        createdb: false
        createrole: false
        inherit: true
        replication: false
        connectionLimit: 40
        passwordSecret:
          name: mattermost-db-credentials

      # Keycloak Application User
      - name: keycloak_app
        ensure: present
        login: true
        superuser: false
        createdb: false
        createrole: false
        inherit: true
        replication: false
        connectionLimit: 20
        passwordSecret:
          name: keycloak-db-credentials

      # Read-Only User for Analytics
      - name: readonly_user
        ensure: present
        login: true
        superuser: false
        createdb: false
        createrole: false
        inherit: true
        replication: false
        connectionLimit: 10
        passwordSecret:
          name: postgres-readonly-credentials

      # SynergyFlow Application User (Flowable workflow engine)
      - name: synergyflow_app
        ensure: present
        login: true
        superuser: false
        createdb: false
        createrole: false
        inherit: true
        replication: false
        connectionLimit: 50
        passwordSecret:
          name: synergyflow-db-credentials

  # Service Template
  serviceAccountTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: shared-postgres
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: cloudnative-pg

  # Pod Security (managed automatically by CNPG operator)