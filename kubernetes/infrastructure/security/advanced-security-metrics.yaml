---
# Advanced Security Metrics Framework
# Comprehensive security metrics collection and analysis

# yaml-language-server: $schema=https://kube-schemas.pages.dev/monitoring.coreos.com/prometheusrule_v1.json
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: advanced-security-metrics
  namespace: observability
  labels:
    app.kubernetes.io/name: security-metrics
    app.kubernetes.io/component: advanced-metrics
    monosense.io/security-framework: enhanced
spec:
  groups:
    - name: security.authentication
      interval: 30s
      rules:
        # Authentication and Authorization Monitoring
        - record: security:auth:failed_login_rate
          expr: |
            sum(rate(kubelet_server_authentication_errors_total[5m])) by (cluster)
          labels:
            component: authentication
            severity: warning

        - record: security:auth:success_rate
          expr: |
            sum(rate(kubelet_server_authentication_success_total[5m])) by (cluster) /
            sum(rate(kubelet_server_authentication_total[5m])) by (cluster) * 100
          labels:
            component: authentication
            severity: info

        - record: security:auth:rbac_denials_rate
          expr: |
            sum(rate(kubeapiserver_authorization_decisions_total{decision="deny"}[5m])) by (cluster, user, verb, resource)
          labels:
            component: authorization
            severity: warning

        - record: security:auth:privileged_operations_rate
          expr: |
            sum(rate(kubeapiserver_request_total{verb=~"(create|delete|patch)", resource=~"(pods|services|deployments|secrets)"}[5m])) by (cluster, user, namespace)
          labels:
            component: authorization
            severity: info

    - name: security.network
      interval: 30s
      rules:
        # Network Security Metrics
        - record: security:network:denied_flows_rate
          expr: |
            sum(rate(hubble_flows_processed_total{verdict="denied"}[5m])) by (cluster, source_namespace, destination_namespace)
          labels:
            component: network_security
            severity: warning

        - record: security:network:malicious_connections_rate
          expr: |
            sum(rate(hubble_flows_processed_total{destination_ip=~"10\\.0\\.0\\.0/8|192\\.168\\.0\\.0/16|172\\.16\\.0\\.0/12", verdict="denied"}[5m])) by (cluster, source_namespace)
          labels:
            component: network_security
            severity: critical

        - record: security:network:encrypted_traffic_percentage
          expr: |
            sum(rate(hubble_flows_processed_total{traffic_encryption="enabled"}[5m])) by (cluster) /
            sum(rate(hubble_flows_processed_total[5m])) by (cluster) * 100
          labels:
            component: network_security
            severity: info

        - record: security:network:port_scan_detection_rate
          expr: |
            sum(rate(hubble_flows_processed_total{tcp_flags=~"SYN", verdict="denied"}[5m])) by (cluster, source_ip) > 10
          labels:
            component: network_security
            severity: warning

        - record: security:network:lateral_movement_attempts
          expr: |
            sum(rate(hubble_flows_processed_total{source_namespace!="kube-system", destination_namespace!="kube-system", source_namespace!=destination_namespace}[5m])) by (cluster, source_namespace, destination_namespace)
          labels:
            component: network_security
            severity: warning

    - name: security.container
      interval: 30s
      rules:
        # Container Security Monitoring
        - record: security:container:privileged_containers_count
          expr: |
            sum(kube_pod_info{privileged="true"}) by (cluster, namespace)
          labels:
            component: container_security
            severity: warning

        - record: security:container:sensitive_mounts_count
          expr: |
            sum(kube_pod_info{host_mount="true"}) by (cluster, namespace)
          labels:
            component: container_security
            severity: warning

        - record: security:container:escalation_risk_score
          expr: |
            sum by (cluster, namespace) (
              kube_pod_info{privileged="true"} * 10 +
              kube_pod_info{host_network="true"} * 5 +
              kube_pod_info{host_pid="true"} * 3 +
              kube_pod_info{host_ipc="true"} * 2
            )
          labels:
            component: container_security
            severity: info

        - record: security:container:image_vulnerability_score
          expr: |
            sum(container_image_vulnerabilities_total{severity=~"Critical|High"}) by (cluster, namespace, image)
          labels:
            component: container_security
            severity: critical

        - record: security:container:unusual_process_executions_rate
          expr: |
            sum(rate(falco_events_total{rule="Unexpected process execution"}[5m])) by (cluster, namespace, pod)
          labels:
            component: container_security
            severity: warning

    - name: security.data_access
      interval: 30s
      rules:
        # Data Access Monitoring and Exfiltration Detection
        - record: security:data:secret_access_rate
          expr: |
            sum(rate(kubeapiserver_request_total{resource="secrets", verb="get"}[5m])) by (cluster, namespace, user)
          labels:
            component: data_access
            severity: info

        - record: security:data:configmap_access_rate
          expr: |
            sum(rate(kubeapiserver_request_total{resource="configmaps", verb="get"}[5m])) by (cluster, namespace, user)
          labels:
            component: data_access
            severity: info

        - record: security:data:large_data_transfers_rate
          expr: |
            sum(rate(container_network_transmit_bytes_total[5m])) by (cluster, namespace, pod) > 100000000
          labels:
            component: data_access
            severity: warning

        - record: security:data:suspicious_file_access_rate
          expr: |
            sum(rate(falco_events_total{rule="Read sensitive file"}[5m])) by (cluster, namespace, pod)
          labels:
            component: data_access
            severity: critical

        - record: security:data:database_access_anomaly_score
          expr: |
            sum by (cluster, namespace) (
              rate(pg_stat_database_xact_commit_total[5m]) * 0.3 +
              rate(pg_stat_database_xact_rollback_total[5m]) * 0.7 +
              rate(pg_stat_database_deadlocks_total[5m]) * 1.0
            )
          labels:
            component: data_access
            severity: warning

    - name: security.compliance
      interval: 30s
      rules:
        # Security Policy Compliance and Deviation Monitoring
        - record: security:compliance:policy_violations_rate
          expr: |
            sum(rate(kube_policy_violations_total[5m])) by (cluster, namespace, policy_type)
          labels:
            component: compliance
            severity: warning

        - record: security:compliance:encryption_coverage_percentage
          expr: |
            sum(kubernetes_pod_info{encrypted="true"}) by (cluster) /
            sum(kubernetes_pod_info) by (cluster) * 100
          labels:
            component: compliance
            severity: info

        - record: security:compliance:image_registry_compliance_score
          expr: |
            sum by (cluster) (
              kubernetes_pod_info{image_registry=~"registry\\.k8s\\.io|docker\\.io/library|gcr\\.io"} * 1 +
              kubernetes_pod_info{image_registry!~"registry\\.k8s\\.io|docker\\.io/library|gcr\\.io"} * 0
            ) / sum(kubernetes_pod_info) by (cluster) * 100
          labels:
            component: compliance
            severity: info

        - record: security:compliance:rbac_coverage_percentage
          expr: |
            sum(kubernetes_serviceaccount_count) by (cluster) /
            sum(kubernetes_pod_count) by (cluster) * 100
          labels:
            component: compliance
            severity: info

        - record: security:compliance:network_policy_coverage_percentage
          expr: |
            sum(kubernetes_networkpolicy_count) by (cluster, namespace) /
            sum(kubernetes_pod_count) by (cluster, namespace) * 100
          labels:
            component: compliance
            severity: warning

    - name: security.threat_intelligence
      interval: 30s
      rules:
        # Threat Intelligence Integration Metrics
        - record: security:threat:malicious_ip_connections_rate
          expr: |
            sum(rate(hubble_flows_processed_total{destination_ip=~"(${threat_ips:regex})"}[5m])) by (cluster, source_namespace)
          labels:
            component: threat_intelligence
            severity: critical

        - record: security:threat:malicious_domain_requests_rate
          expr: |
            sum(rate(hubble_dns_queries_total{query_name=~"(${malicious_domains:regex})"}[5m])) by (cluster, source_namespace)
          labels:
            component: threat_intelligence
            severity: critical

        - record: security:threat:known_vulnerability_exploits_rate
          expr: |
            sum(rate(falco_events_total{rule="Exploit detected"}[5m])) by (cluster, namespace, pod)
          labels:
            component: threat_intelligence
            severity: critical

        - record: security:threat:zero_day_indicators_rate
          expr: |
            sum(rate(hubble_flows_processed_total{anomaly_score>0.8}[5m])) by (cluster, source_namespace)
          labels:
            component: threat_intelligence
            severity: warning

    - name: security.incident_response
      interval: 30s
      rules:
        # Security Incident Response Metrics
        - record: security:incident:detection_time_seconds
          expr: |
            avg(security_incident_detection_seconds) by (cluster, incident_type)
          labels:
            component: incident_response
            severity: info

        - record: security:incident:response_time_seconds
          expr: |
            avg(security_incident_response_seconds) by (cluster, incident_type)
          labels:
            component: incident_response
            severity: info

        - record: security:incident:containment_time_seconds
          expr: |
            avg(security_incident_containment_seconds) by (cluster, incident_type)
          labels:
            component: incident_response
            severity: info

        - record: security:incident:recovery_time_seconds
          expr: |
            avg(security_incident_recovery_seconds) by (cluster, incident_type)
          labels:
            component: incident_response
            severity: info

        - record: security:incident:mttr_seconds
          expr: |
            avg(security_incident_mttr_seconds) by (cluster, incident_type)
          labels:
            component: incident_response
            severity: info

    - name: security.performance
      interval: 30s
      rules:
        # Security System Performance Metrics
        - record: security:performance:falco_processing_latency_seconds
          expr: |
            histogram_quantile(0.99, rate(falco_processing_duration_seconds_bucket[5m]))
          labels:
            component: performance
            severity: warning

        - record: security:performance:cilium_policy_enforcement_latency_seconds
          expr: |
            histogram_quantile(0.99, rate(cilium_policy_enforcement_duration_seconds_bucket[5m]))
          labels:
            component: performance
            severity: warning

        - record: security:performance:security_agent_cpu_usage_percentage
          expr: |
            sum(rate(container_cpu_usage_seconds_total{pod=~".*security.*|falco.*|cilium.*"}[5m])) by (cluster, pod) * 100
          labels:
            component: performance
            severity: info

        - record: security:performance:security_agent_memory_usage_bytes
          expr: |
            sum(container_memory_usage_bytes{pod=~".*security.*|falco.*|cilium.*"}) by (cluster, pod)
          labels:
            component: performance
            severity: info

---
# Security Metrics Recording Rules - Business Impact
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: security-business-metrics
  namespace: observability
  labels:
    app.kubernetes.io/name: security-business-metrics
    app.kubernetes.io/component: business-impact
    monosense.io/security-framework: enhanced
spec:
  groups:
    - name: security.business_impact
      interval: 60s
      rules:
        # Business Impact Metrics
        - record: business:security:risk_score
          expr: |
            (
              (security:threat:malicious_ip_connections_rate * 10) +
              (security:threat:malicious_domain_requests_rate * 8) +
              (security:auth:failed_login_rate * 5) +
              (security:network:denied_flows_rate * 3) +
              (security:container:escalation_risk_score * 2)
            ) by (cluster)
          labels:
            component: business_impact
            severity: warning

        - record: business:security:compliance_percentage
          expr: |
            (
              security:compliance:encryption_coverage_percentage * 0.25 +
              security:compliance:network_policy_coverage_percentage * 0.25 +
              security:compliance:rbac_coverage_percentage * 0.25 +
              security:compliance:image_registry_compliance_score * 0.25
            ) by (cluster)
          labels:
            component: business_impact
            severity: info

        - record: business:security:incident_cost_impact
          expr: |
            sum(
              security:incident:detection_time_seconds * 0.1 +
              security:incident:response_time_seconds * 0.2 +
              security:incident:containment_time_seconds * 0.3 +
              security:incident:recovery_time_seconds * 0.4
            ) by (cluster, incident_type) * 100
          labels:
            component: business_impact
            severity: warning

        - record: business:security:security_posture_trend
          expr: |
            (
              business:security:compliance_percentage * 0.4 +
              (100 - business:security:risk_score) * 0.6
            ) by (cluster)
          labels:
            component: business_impact
            severity: info

---
# Security Metrics Aggregation and Correlation
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-metrics-queries
  namespace: observability
  labels:
    app.kubernetes.io/name: security-metrics-queries
    app.kubernetes.io/component: analytics
    monosense.io/security-framework: enhanced
data:
  # Advanced Security Analytics Queries
  security_analytics_queries.sql: |
    -- Security Event Correlation Analysis

    -- 1. Lateral Movement Detection
    SELECT
      timestamp,
      source_namespace,
      destination_namespace,
      COUNT(*) as connection_count,
      SUM(bytes_transferred) as total_bytes
    FROM security_network_flows
    WHERE source_namespace != destination_namespace
      AND timestamp >= NOW() - INTERVAL '1 hour'
    GROUP BY timestamp, source_namespace, destination_namespace
    HAVING COUNT(*) > 10
    ORDER BY connection_count DESC;

    -- 2. Privilege Escalation Pattern Analysis
    SELECT
      timestamp,
      user,
      namespace,
      COUNT(DISTINCT verb) as unique_operations,
      ARRAY_AGG(DISTINCT verb) as operations
    FROM security_authorization_events
    WHERE verb IN ('create', 'delete', 'patch', 'update')
      AND resource IN ('pods', 'deployments', 'services', 'secrets')
      AND timestamp >= NOW() - INTERVAL '24 hours'
    GROUP BY timestamp, user, namespace
    HAVING COUNT(DISTINCT verb) > 3;

    -- 3. Anomalous Data Access Patterns
    SELECT
      timestamp,
      user,
      namespace,
      resource_type,
      COUNT(*) as access_count,
      AVG(response_time_ms) as avg_response_time
    FROM security_access_events
    WHERE resource_type IN ('secrets', 'configmaps', 'persistentvolumes')
      AND timestamp >= NOW() - INTERVAL '6 hours'
    GROUP BY timestamp, user, namespace, resource_type
    HAVING COUNT(*) > (
      SELECT PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY access_count)
      FROM (
        SELECT COUNT(*) as access_count
        FROM security_access_events
        WHERE resource_type IN ('secrets', 'configmaps', 'persistentvolumes')
          AND timestamp >= NOW() - INTERVAL '7 days'
        GROUP BY user, namespace, resource_type
      ) as baseline
    );

    -- 4. Threat Intelligence Correlation
    SELECT
      s.timestamp,
      s.source_ip,
      s.destination_ip,
      s.source_namespace,
      t.threat_type,
      t.severity,
      t.confidence
    FROM security_network_flows s
    JOIN threat_intelligence t ON s.destination_ip = t.indicator
    WHERE s.timestamp >= NOW() - INTERVAL '1 hour'
      AND t.severity IN ('HIGH', 'CRITICAL');

    -- 5. Security Posture Assessment
    WITH compliance_metrics AS (
      SELECT
        cluster,
        AVG(encryption_coverage) as avg_encryption,
        AVG(network_policy_coverage) as avg_network_policy,
        AVG(rbac_coverage) as avg_rbac,
        AVG(image_registry_compliance) as avg_registry_compliance
      FROM security_compliance_metrics
      WHERE timestamp >= NOW() - INTERVAL '24 hours'
      GROUP BY cluster
    ),
    threat_metrics AS (
      SELECT
        cluster,
        SUM(malicious_connections) as total_threats,
        AVG(anomaly_score) as avg_anomaly_score
      FROM security_threat_metrics
      WHERE timestamp >= NOW() - INTERVAL '24 hours'
      GROUP BY cluster
    )
    SELECT
      c.cluster,
      (c.avg_encryption * 0.25 +
       c.avg_network_policy * 0.25 +
       c.avg_rbac * 0.25 +
       c.avg_registry_compliance * 0.25) as compliance_score,
      (t.total_threats * 10 + t.avg_anomaly_score * 5) as risk_score,
      ((c.avg_encryption * 0.25 +
        c.avg_network_policy * 0.25 +
        c.avg_rbac * 0.25 +
        c.avg_registry_compliance * 0.25) -
       (t.total_threats * 10 + t.avg_anomaly_score * 5)) as security_posture
    FROM compliance_metrics c
    LEFT JOIN threat_metrics t ON c.cluster = t.cluster;

  # Machine Learning Security Analytics
  ml_security_models.py: |
    import pandas as pd
    import numpy as np
    from sklearn.ensemble import IsolationForest
    from sklearn.preprocessing import StandardScaler
    from sklearn.cluster import DBSCAN

    class SecurityAnalyticsML:
        def __init__(self):
            self.isolation_forest = IsolationForest(contamination=0.1, random_state=42)
            self.dbscan = DBSCAN(eps=0.5, min_samples=5)
            self.scaler = StandardScaler()

        def detect_network_anomalies(self, network_data):
            """Detect anomalous network traffic patterns"""
            features = [
                'bytes_transferred',
                'connection_duration',
                'packet_count',
                'port_number',
                'protocol_type'
            ]

            X = network_data[features].values
            X_scaled = self.scaler.fit_transform(X)

            # Isolation Forest for anomaly detection
            anomaly_scores = self.isolation_forest.fit_predict(X_scaled)
            network_data['anomaly_score'] = anomaly_scores

            # DBSCAN for clustering and outlier detection
            clusters = self.dbscan.fit_predict(X_scaled)
            network_data['cluster'] = clusters

            return network_data[network_data['anomaly_score'] == -1]

        def detect_privilege_escalation(self, auth_data):
            """Detect potential privilege escalation attempts"""
            features = [
                'auth_attempts',
                'failed_logins',
                'unique_verbs',
                'resource_access_count',
                'time_window_minutes'
            ]

            X = auth_data[features].values
            X_scaled = self.scaler.fit_transform(X)

            anomaly_scores = self.isolation_forest.fit_predict(X_scaled)
            auth_data['escalation_risk'] = anomaly_scores

            return auth_data[auth_data['escalation_risk'] == -1]

        def detect_lateral_movement(self, flow_data):
            """Detect lateral movement patterns"""
            # Group flows by source and analyze destination patterns
            source_analysis = flow_data.groupby('source_ip').agg({
                'destination_ip': 'nunique',
                'destination_namespace': 'nunique',
                'bytes_transferred': 'sum',
                'connection_count': 'sum'
            }).reset_index()

            # Calculate lateral movement score
            source_analysis['lateral_movement_score'] = (
                source_analysis['destination_ip'] * 0.3 +
                source_analysis['destination_namespace'] * 0.4 +
                np.log1p(source_analysis['bytes_transferred']) * 0.2 +
                source_analysis['connection_count'] * 0.1
            )

            # Flag high lateral movement scores
            threshold = source_analysis['lateral_movement_score'].quantile(0.95)
            high_risk_sources = source_analysis[
                source_analysis['lateral_movement_score'] > threshold
            ]

            return high_risk_sources

        def predict_security_incidents(self, metrics_data):
            """Predict potential security incidents based on metrics"""
            features = [
                'failed_login_rate',
                'network_denials_rate',
                'policy_violations_rate',
                'malicious_connections_rate',
                'container_escalation_score',
                'compliance_percentage'
            ]

            X = metrics_data[features].values
            X_scaled = self.scaler.fit_transform(X)

            # Risk scoring
            risk_scores = self.isolation_forest.decision_function(X_scaled)
            metrics_data['incident_risk_score'] = risk_scores

            # Classify risk levels
            metrics_data['risk_level'] = pd.cut(
                metrics_data['incident_risk_score'],
                bins=[-1, -0.5, -0.2, 0, 1],
                labels=['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']
            )

            return metrics_data[metrics_data['risk_level'].isin(['CRITICAL', 'HIGH'])]

---
# Security Metrics Exporters Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: security-exporters-config
  namespace: observability
  labels:
    app.kubernetes.io/name: security-exporters
    app.kubernetes.io/component: exporters
    monosense.io/security-framework: enhanced
data:
  # Custom Security Metrics Exporter
  security-metrics-exporter.yaml: |
    # Custom Security Metrics Exporter Configuration
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: security-metrics-exporter
      namespace: observability
      labels:
        app.kubernetes.io/name: security-metrics-exporter
        app.kubernetes.io/component: exporter
    spec:
      replicas: 2
      selector:
        matchLabels:
          app.kubernetes.io/name: security-metrics-exporter
      template:
        metadata:
          labels:
            app.kubernetes.io/name: security-metrics-exporter
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "8080"
            prometheus.io/path: "/metrics"
        spec:
          containers:
          - name: security-metrics-exporter
            image: security-metrics-exporter:latest
            ports:
            - containerPort: 8080
              name: metrics
            env:
            - name: CLUSTER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['kubernetes.io/cluster']
            - name: METRICS_INTERVAL
              value: "30s"
            - name: LOG_LEVEL
              value: "info"
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 500m
                memory: 256Mi
            livenessProbe:
              httpGet:
                path: /health
                port: 8080
              initialDelaySeconds: 30
              periodSeconds: 10
            readinessProbe:
              httpGet:
                path: /ready
                port: 8080
              initialDelaySeconds: 5
              periodSeconds: 5
          serviceAccountName: security-metrics-exporter
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 2000

---
# Service Account for Security Metrics Exporter
apiVersion: v1
kind: ServiceAccount
metadata:
  name: security-metrics-exporter
  namespace: observability
  labels:
    app.kubernetes.io/name: security-metrics-exporter
    app.kubernetes.io/component: exporter

---
# RBAC for Security Metrics Exporter
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: security-metrics-exporter
  labels:
    app.kubernetes.io/name: security-metrics-exporter
    app.kubernetes.io/component: exporter
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "services", "namespaces"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings", "clusterroles", "clusterrolebindings"]
  verbs: ["get", "list"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: security-metrics-exporter
  labels:
    app.kubernetes.io/name: security-metrics-exporter
    app.kubernetes.io/component: exporter
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: security-metrics-exporter
subjects:
- kind: ServiceAccount
  name: security-metrics-exporter
  namespace: observability

---
# Service for Security Metrics Exporter
apiVersion: v1
kind: Service
metadata:
  name: security-metrics-exporter
  namespace: observability
  labels:
    app.kubernetes.io/name: security-metrics-exporter
    app.kubernetes.io/component: exporter
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app.kubernetes.io/name: security-metrics-exporter
  ports:
  - port: 8080
    targetPort: metrics
    name: metrics
  type: ClusterIP
