---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: database-provisioner
---
apiVersion: batch/v1
kind: Job
metadata:
  name: database-provisioner
spec:
  # Keep completed job for 24 hours for debugging
  ttlSecondsAfterFinished: 86400
  backoffLimit: 3

  template:
    metadata:
      labels:
        app.kubernetes.io/name: database-provisioner
    spec:
      serviceAccountName: database-provisioner
      restartPolicy: OnFailure

      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault

      containers:
        - name: provisioner
          image: ghcr.io/cloudnative-pg/postgresql:16.8
          imagePullPolicy: IfNotPresent

          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 65534
            capabilities:
              drop:
                - ALL

          env:
            # Database configuration (to be patched)
            - name: DB_NAME
              value: "changeme"
            - name: DB_OWNER
              value: "changeme_app"
            - name: CLUSTER_NAME
              value: "shared-postgres"
            - name: CLUSTER_NAMESPACE
              value: "cnpg-system"
            - name: EXTENSIONS
              value: "pg_stat_statements"

            # Superuser credentials
            - name: PGHOST
              value: "$(CLUSTER_NAME)-rw.$(CLUSTER_NAMESPACE).svc.cluster.local"
            - name: PGPORT
              value: "5432"
            - name: PGDATABASE
              value: "postgres"
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: cnpg-superuser
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: cnpg-superuser
                  key: password

            # Application user password
            - name: APP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: password

          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Starting database provisioning for: $DB_NAME"

              # Wait for database to be ready
              until psql -c '\l' > /dev/null 2>&1; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 5
              done

              echo "PostgreSQL is ready"

              # Check if database exists
              DB_EXISTS=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'")

              if [ "$DB_EXISTS" = "1" ]; then
                echo "Database $DB_NAME already exists"
              else
                echo "Creating database: $DB_NAME"
                psql -c "CREATE DATABASE $DB_NAME OWNER $DB_OWNER;"
              fi

              # Check if user exists
              USER_EXISTS=$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_OWNER'")

              if [ "$USER_EXISTS" = "1" ]; then
                echo "User $DB_OWNER already exists, updating password"
                psql -c "ALTER USER $DB_OWNER WITH PASSWORD '$APP_PASSWORD';"
              else
                echo "Creating user: $DB_OWNER"
                psql -c "CREATE USER $DB_OWNER WITH PASSWORD '$APP_PASSWORD' LOGIN;"
              fi

              # Grant permissions
              echo "Granting permissions"
              psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_OWNER;"
              psql -c "ALTER DATABASE $DB_NAME OWNER TO $DB_OWNER;"

              # Connect to application database for schema setup
              export PGDATABASE=$DB_NAME

              # Grant schema permissions
              psql -c "GRANT ALL ON SCHEMA public TO $DB_OWNER;"
              psql -c "ALTER SCHEMA public OWNER TO $DB_OWNER;"

              # Install extensions
              if [ -n "$EXTENSIONS" ]; then
                echo "Installing extensions: $EXTENSIONS"
                for ext in $(echo $EXTENSIONS | tr ',' ' '); do
                  psql -c "CREATE EXTENSION IF NOT EXISTS $ext;"
                done
              fi

              # Revoke public access
              psql -c "REVOKE ALL ON DATABASE $DB_NAME FROM PUBLIC;"

              echo "Database provisioning completed successfully"
              echo "Database: $DB_NAME"
              echo "Owner: $DB_OWNER"
              echo "Extensions: $EXTENSIONS"

          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
