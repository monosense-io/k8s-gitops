---
# Business Metrics Configuration
# Defines custom business metric calculations and transformations
apiVersion: v1
kind: ConfigMap
metadata:
  name: business-metrics-config
  namespace: observability
  labels:
    app.kubernetes.io/name: business-metrics
    app.kubernetes.io/component: configuration
data:
  # Business metric recording rules for VictoriaMetrics/vmalert
  business-metrics-rules.yaml: |
    groups:
      # Business KPI Calculations
      - name: business.kpi.calculations
        interval: 1m
        rules:
          # Developer Productivity Index
          - record: business:kpi:developer_productivity_index
            expr: |
              (
                (rate(gitlab_merge_requests_created_total[1h]) * 0.3) +
                (rate(gitlab_pipelines_success_total[1h]) * 0.4) +
                ((1 - rate(gitlab_builds_failed_total[1h]) / rate(gitlab_builds_total[1h])) * 0.3)
              ) * 100
            labels:
              business_domain: "devops_platform"
              kpi_category: "productivity"

          # Platform User Engagement Score
          - record: business:kpi:user_engagement_score
            expr: |
              (
                (sum(gitlab_users_active_total) * 0.4) +
                (rate(gitlab_projects_created_total[1h]) * 0.3) +
                (rate(gitlab_merge_requests_created_total[1h]) * 0.3)
              ) / (sum(gitlab_users_active_total) + 1)
            labels:
              business_domain: "collaboration"
              kpi_category: "engagement"

          # Service Quality Score
          - record: business:kpi:service_quality_score
            expr: |
              (
                (avg(up{job=~"gitlab.*"}) * 0.5) +
                ((1 - rate(gitlab_http_requests_total{status=~"5.."}[5m]) / rate(gitlab_http_requests_total[5m])) * 0.3) +
                ((1 - histogram_quantile(0.95, rate(gitlab_http_request_duration_seconds_bucket[5m])) / 2) * 0.2)
              ) * 100
            labels:
              business_domain: "platform_services"
              kpi_category: "quality"

          # Cost Efficiency Index
          - record: business:kpi:cost_efficiency_index
            expr: |
              (
                (sum(rate(container_cpu_usage_seconds_total{namespace!~"kube-system|observability"}[5m])) /
                 sum(container_spec_cpu_quota{namespace!~"kube-system|observability"}) * 0.5) +
                (sum(avg_over_time(container_memory_usage_bytes{namespace!~"kube-system|observability"}[5m])) /
                 sum(container_spec_memory_limit_bytes{namespace!~"kube-system|observability"}) * 0.5)
              ) * 100
            labels:
              business_domain: "infrastructure"
              kpi_category: "cost_efficiency"

          # Database Performance Index
          - record: business:kpi:database_performance_index
            expr: |
              (
                (avg(pg_stat_database_cache_hit_ratio) * 0.4) +
                ((1 - sum(pg_stat_activity_long_running_queries) / (sum(pg_stat_activity_connections) + 1)) * 0.3) +
                ((1 - avg(pg_stat_database_connections_active) / avg(pg_stat_database_connections_max)) * 0.3)
              ) * 100
            labels:
              business_domain: "data_services"
              kpi_category: "performance"

      # Business Impact Calculations
      - name: business.impact.calculations
        interval: 5m
        rules:
          # Revenue Impact Estimation (based on developer productivity loss)
          - record: business:impact:revenue_impact_hourly
            expr: |
              (
                (1 - business:kpi:developer_productivity_index / 100) *
                sum(gitlab_users_active_total) *
                150  # $150/hour estimated developer value
              )
            labels:
              business_domain: "financial"
              impact_type: "revenue"
              time_unit: "hourly"

          # Operational Cost per User
          - record: business:cost:per_user_monthly
            expr: |
              (
                (sum(rate(container_cpu_usage_seconds_total{namespace!~"kube-system|observability"}[5m])) * 0.00005 * 720) +
                (sum(avg_over_time(container_memory_usage_bytes{namespace!~"kube-system|observability"}[5m])) * 0.00000002 * 720)
              ) / (sum(gitlab_users_active_total) + 1)
            labels:
              business_domain: "financial"
              cost_category: "operational"
              time_unit: "monthly"

          # Storage Cost per GB
          - record: business:cost:per_gb_monthly
            expr: |
              (
                sum(avg_over_time(container_memory_usage_bytes{namespace!~"kube-system|observability"}[5m])) * 0.00000002 * 720
              ) / (sum(kubelet_volume_stats_used_bytes{namespace!~"kube-system|observability"}) / 1073741824)
            labels:
              business_domain: "financial"
              cost_category: "storage"
              time_unit: "monthly"

          # Business Process Efficiency
          - record: business:process:ci_cd_efficiency
            expr: |
              (
                (rate(gitlab_pipelines_success_total[1h]) / rate(gitlab_pipelines_total[1h]) * 0.5) +
                ((1 - histogram_quantile(0.90, rate(gitlab_pipeline_duration_seconds_bucket[1h])) / 1200) * 0.3) +
                ((1 - rate(gitlab_builds_failed_total[1h]) / rate(gitlab_builds_total[1h])) * 0.2)
              ) * 100
            labels:
              business_domain: "devops_processes"
              process_category: "ci_cd"
              efficiency_type: "overall"

      # Business Trend Analysis
      - name: business.trend.analysis
        interval: 1h
        rules:
          # Week-over-week user growth
          - record: business:trend:user_growth_wow
            expr: |
              (
                sum(gitlab_users_active_total) -
                sum(gitlab_users_active_total offset 7d)
              ) / (sum(gitlab_users_active_total offset 7d) + 1) * 100
            labels:
              business_domain: "growth"
              trend_type: "week_over_week"
              metric_category: "users"

          # Month-over-month project growth
          - record: business:trend:project_growth_mom
            expr: |
              (
                sum(gitlab_projects_count) -
                sum(gitlab_projects_count offset 30d)
              ) / (sum(gitlab_projects_count offset 30d) + 1) * 100
            labels:
              business_domain: "growth"
              trend_type: "month_over_month"
              metric_category: "projects"

          # Cost trend analysis
          - record: business:trend:cost_growth_mom
            expr: |
              (
                business:cost:per_user_monthly -
                business:cost:per_user_monthly offset 30d
              ) / (business:cost:per_user_monthly offset 30d + 1) * 100
            labels:
              business_domain: "financial"
              trend_type: "month_over_month"
              metric_category: "costs"

  # Business metrics transformation queries for Grafana
  grafana-transformations.json: |
    {
      "business_kpi_queries": {
        "developer_productivity": {
          "query": "business:kpi:developer_productivity_index",
          "unit": "percent",
          "thresholds": [70, 85, 95],
          "description": "Composite index measuring developer productivity based on merge requests, pipeline success, and build success rates"
        },
        "user_engagement": {
          "query": "business:kpi:user_engagement_score",
          "unit": "score",
          "thresholds": [50, 70, 85],
          "description": "User engagement score based on active users, project creation, and merge request activity"
        },
        "service_quality": {
          "query": "business:kpi:service_quality_score",
          "unit": "percent",
          "thresholds": [90, 95, 99],
          "description": "Service quality score combining availability, error rates, and response times"
        },
        "cost_efficiency": {
          "query": "business:kpi:cost_efficiency_index",
          "unit": "percent",
          "thresholds": [60, 80, 90],
          "description": "Resource utilization efficiency measuring CPU and memory usage efficiency"
        }
      },
      "financial_metrics": {
        "revenue_impact": {
          "query": "business:impact:revenue_impact_hourly",
          "unit": "currencyUSD",
          "description": "Estimated hourly revenue impact based on developer productivity loss"
        },
        "cost_per_user": {
          "query": "business:cost:per_user_monthly",
          "unit": "currencyUSD",
          "description": "Monthly operational cost per active user"
        },
        "cost_per_gb": {
          "query": "business:cost:per_gb_monthly",
          "unit": "currencyUSD",
          "description": "Monthly storage cost per gigabyte"
        }
      },
      "process_metrics": {
        "cicd_efficiency": {
          "query": "business:process:ci_cd_efficiency",
          "unit": "percent",
          "thresholds": [70, 85, 95],
          "description": "CI/CD process efficiency combining success rates, duration, and build quality"
        }
      }
    }

  # Business alert definitions and escalation policies
  business-alerting-policies.yaml: |
    alerting_policies:
      critical_business_impact:
        severity: critical
        escalation_path:
          - level: 1
            team: "platform_engineering"
            notification_channel: "slack-alerts-critical"
            escalation_time: "5m"
          - level: 2
            team: "engineering_leadership"
            notification_channel: "slack-engineering-leads"
            escalation_time: "15m"
          - level: 3
            team: "executives"
            notification_channel: "email-executives"
            escalation_time: "30m"

      high_business_impact:
        severity: warning
        escalation_path:
          - level: 1
            team: "platform_engineering"
            notification_channel: "slack-alerts-high"
            escalation_time: "15m"
          - level: 2
            team: "engineering_leadership"
            notification_channel: "slack-engineering-leads"
            escalation_time: "1h"

      medium_business_impact:
        severity: info
        escalation_path:
          - level: 1
            team: "platform_engineering"
            notification_channel: "slack-alerts-medium"
            escalation_time: "1h"

      cost_optimization:
        severity: info
        escalation_path:
          - level: 1
            team: "infrastructure_team"
            notification_channel: "slack-cost-optimization"
            escalation_time: "24h"
          - level: 2
            team: "finance"
            notification_channel: "email-finance"
            escalation_time: "7d"