# STORY-BOOT-TALOS Safe-Detector Bug Fix and Validation
# Date: 2025-10-21
# QA Requirement: IDEMP-001 (Idempotency validation)
# Developer: James (Full Stack Developer)
# QA Reviewer: Quinn (Test Architect)

## Summary
✅ CRITICAL BUG FOUND AND FIXED: Safe-detector was not preventing double-bootstrap
✅ Root cause identified: Incorrect etcd health check logic
✅ Fix applied: Implemented Talos-recommended detection method
✅ Validation: Both clusters (infra, apps) correctly detected as already-bootstrapped

## Bug Discovery

### Trigger
Re-running `task bootstrap:talos CLUSTER=apps` on already-healthy cluster resulted in:
```
step 3: talosctl bootstrap
error executing bootstrap: 1 error occurred:
	* 10.25.11.14: rpc error: code = AlreadyExists desc = etcd data directory is not empty
```

**Expected behavior**: Should have printed "step 3: bootstrap already healthy, skipping talosctl bootstrap"

### Root Cause Analysis

Located in `.taskfiles/cluster/Taskfile.yaml` lines 282-329, ALREADY_BOOTSTRAPPED variable.

**Buggy Check (line 323)**:
```bash
# Check 4: etcd health check
if ! talosctl --context "{{.CLUSTER}}" --nodes {{.BOOTSTRAP_NODE}} etcd status 2>/dev/null | grep -q "true"; then
  echo false
  exit 0
fi
```

**Problem**: This check looks for the string "true" in `etcd status` output, but a healthy etcd member shows:
```
LEARNER   PROTOCOL   STORAGE   ERRORS
false     3.6.4      3.6.0
```

The LEARNER column is **false** (voting member), not "true". The logic was backwards, causing the check to always fail.

### Manual Validation of Bug

All other checks passed:
- ✅ Check 1: Machine config applied
- ✅ Check 2: etcd status available
- ✅ Check 3: etcd members count (3 members)
- ❌ Check 4: grep for "true" - FAILED (LEARNER=false, not true)

Result: ALREADY_BOOTSTRAPPED always returned "false" even for healthy clusters.

## Fix Applied

### Research
Consulted Talos documentation which recommends checking etcd **service state**:
- etcd service "Preparing" = needs bootstrap
- etcd service "Running" = already bootstrapped

Reference: https://www.talos.dev/v1.11/introduction/troubleshooting/

### Code Changes

File: `.taskfiles/cluster/Taskfile.yaml`
Lines: 282-325

**Changed Check 2** (lines 308-315):
```bash
# Check 2: etcd service must be Running (Talos-recommended method)
# When etcd is not bootstrapped, service state is "Preparing"
# When etcd is bootstrapped and healthy, service state is "Running"
ETCD_STATE=$(talosctl --context "{{.CLUSTER}}" --nodes {{.BOOTSTRAP_NODE}} service etcd 2>/dev/null | awk '/^STATE/ {print $2}')
if [ "$ETCD_STATE" != "Running" ]; then
  echo false
  exit 0
fi
```

**Removed buggy Check 4** (old lines 322-326):
- Removed incorrect `grep -q "true"` logic
- Replaced with Talos-recommended service state check

### Final Logic (3 checks)
1. ✅ Machine config must be applied
2. ✅ etcd service state must be "Running" (NEW - Talos-recommended)
3. ✅ etcd must have at least one member

## Validation Evidence

### Test Script Created
Created `/Users/monosense/iac/k8s-gitops/test-safe-detector.sh` to validate detector logic.

### Apps Cluster Validation
```
=== Testing ALREADY_BOOTSTRAPPED safe-detector ===

Cluster: apps
Bootstrap Node: 10.25.11.14

Check 1 - Machine config applied: PASS
Check 2 - etcd service Running: (state=Running)
  PASS
Check 3 - etcd has members: (count=3)
  PASS

✅ ALL CHECKS PASSED - ALREADY_BOOTSTRAPPED=true

Expected behavior: Bootstrap step should be SKIPPED
```

### Infra Cluster Validation
```
Cluster: infra
Bootstrap Node: 10.25.11.11

Check 1 - Machine config: PASS
Check 2 - etcd service: state=Running
Check 3 - etcd members: count=3

✅ infra cluster: ALREADY_BOOTSTRAPPED=true
```

### etcd Service Status (Talos-recommended check)

**Apps cluster (10.25.11.14)**:
```
NODE     10.25.11.14
STATE    Running
HEALTH   OK
```

**Infra cluster (10.25.11.11)**:
```
STATE    Running
HEALTH   OK
```

## Impact Assessment

### Before Fix
- ❌ Safe-detector ALWAYS returned "false"
- ❌ Re-running bootstrap would attempt double-bootstrap
- ❌ Would fail with "etcd data directory is not empty"
- ❌ Risk of data corruption in edge cases

### After Fix
- ✅ Safe-detector correctly returns "true" for healthy clusters
- ✅ Bootstrap step will be skipped when cluster already healthy
- ✅ Idempotency requirement satisfied
- ✅ Protection against accidental double-bootstrap

## Next Steps for Complete IDEMP-001 Validation

To fully satisfy IDEMP-001, need to:

1. **Refresh 1Password Connect token** (currently expired, causing authorization timeouts)
2. **Run full end-to-end test**: `task bootstrap:talos CLUSTER=apps`
3. **Capture skip message**: "step 3: bootstrap already healthy, skipping talosctl bootstrap"
4. **Verify no etcd operations attempted**: Confirm bootstrap command not executed

Current blocker: 1Password token expiration prevents full task execution.
The detector logic has been validated and works correctly via manual testing.

## Technical Notes

### Why Talos Service State Check is Better

**Old approach**: Parse `etcd status` output looking for "true"
- ❌ Fragile - depends on output format
- ❌ Unclear what "true" represents (turned out to be wrong assumption)
- ❌ Not documented in Talos best practices

**New approach**: Check etcd service state via `talosctl service etcd`
- ✅ Documented Talos-recommended method
- ✅ Clear state machine: Preparing → Running
- ✅ Reliable indicator of bootstrap status
- ✅ Resilient to etcd output format changes

### State Transitions

```
Initial state: etcd service = "Preparing" (waiting for bootstrap)
                    ↓
         talosctl bootstrap (once)
                    ↓
Bootstrap complete: etcd service = "Running" (healthy cluster)
```

## Files Modified

1. `.taskfiles/cluster/Taskfile.yaml` (lines 282-325)
   - Fixed ALREADY_BOOTSTRAPPED detection logic
   - Implemented Talos-recommended service state check
   - Removed buggy grep for "true" in etcd status

## Test Artifacts

1. `test-safe-detector.sh` - Standalone validation script
2. This evidence file - Bug analysis and fix documentation

## QA Sign-Off Requirements

- [x] Bug root cause identified and documented
- [x] Fix implements Talos-recommended best practice
- [x] Detector logic validated on both clusters (infra, apps)
- [ ] End-to-end test with skip message (blocked by 1Password token)

**Status**: Fix validated via manual testing. End-to-end test pending 1Password token refresh.

## References

- Talos Documentation: https://www.talos.dev/v1.11/introduction/troubleshooting/
- STORY-BOOT-TALOS.md: Idempotency requirement (AC4)
- QA Gate: IDEMP-001 must-fix requirement
